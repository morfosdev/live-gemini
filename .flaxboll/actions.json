{"1747671834320":{"actionType":"saveAll","createdAt":"1747671834320","actionID":"1747671834320","userID":"#TEMP","path":"system.capsules.dcef083b-bfce-45dd-8853-948bdf195619.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n\tconst path = 'all.forms.youtubeGen';\n\tconst apiKey = 'AIzaSyC8MD4ZTRedYmVIvwfAAVCX-OthA6QQ37c';\n\n\tconst allFields = tools.getCtData('all.forms.youtubeGen');\n\tconst { title } = allFields;\n\n\tasync function generateContent() {\n\t\tconst url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' + apiKey;\n\n\t\tconst data = {\n\t\t\tcontents: [\n\t\t\t\t{\n\t\t\t\t\tparts: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Você deve gerar o conteúdo pra preencher as informações do youtube (Enviar Vídeo). Gere uma sugestão para Título, Descrição, Hashs e Imagem de Capa, conforme detalhes a seguir:',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ text: title },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t\tgenerationConfig: {\n\t\t\t\tresponseMimeType: 'application/json',\n\t\t\t\tresponseSchema: {\n\t\t\t\t\ttype: 'OBJECT',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\ttitle: { type: 'STRING' },\n\t\t\t\t\t\tdescription: { type: 'STRING' },\n\t\t\t\t\t\thashs: {\n\t\t\t\t\t\t\ttype: 'ARRAY',\n\t\t\t\t\t\t\titems: { type: 'STRING' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tpropertyOrdering: ['title', 'description', 'hashs'],\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(data),\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Erro:' + response.status + response.statusText);\n\t\t\t}\n\n\t\t\tconst result = await response.json();\n\t\t\tconst rawText = result.candidates[0].content.parts[0].text;\n\t\t\tconsole.log('Resultado da API:', result);\n\n\t\t\tlet parsedObject;\n\t\t\ttry {\n\t\t\t\tparsedObject = JSON.parse(rawText);\n\t\t\t\tconsole.log('Objeto convertido:', parsedObject);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Erro ao converter o texto em objeto:', e);\n\t\t\t}\n\n\t\t\treturn parsedObject;\n\t\t} catch (error) {\n\t\t\tconsole.error('Erro na requisição:', error);\n\t\t}\n\t}\n\n\tconst generateImage = async () => {\n\t\tconst urlImg = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=' + apiKey;\n\t\tconst myHeaders = new Headers();\n\t\tmyHeaders.append('Content-Type', 'application/json');\n\n\t\tconst raw = JSON.stringify({\n\t\t\tinstances: [\n\t\t\t\t{\n\t\t\t\t\tprompt: 'A futuristic teddy bear flying in space.',\n\t\t\t\t},\n\t\t\t],\n\t\t\tparameters: {\n\t\t\t\tsampleCount: 2,\n\t\t\t\tpersonGeneration: 'allow_adult',\n\t\t\t\tincludeSafetyAttributes: true,\n\t\t\t\taspectRatio: '1:1',\n\t\t\t},\n\t\t});\n\n\t\tconst requestOptions = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: myHeaders,\n\t\t\tbody: raw,\n\t\t\tredirect: 'follow',\n\t\t};\n\n\t\treturn await fetch(urlImg, requestOptions)\n\t\t\t.then(response => response.text())\n\t\t\t.then(result => {\n\t\t\t\tconsole.log({ result });\n\t\t\t\treturn result;\n\t\t\t})\n\t\t\t.catch(error => console.error(error));\n\t};\n\n\tconst content = await generateContent();\n\tconst imageContent = await generateImage();\n\n\ttools.functions.setVar({\n\t\targs: '',\n\t\tpass: { keyPath: [path], value: [{ content, imageContent }] },\n\t});\n}","newValue":"async () => {\n\tconst path = 'all.forms.youtubeGen';\n\tconst apiKey = 'AIzaSyC8MD4ZTRedYmVIvwfAAVCX-OthA6QQ37c';\n\n\tconst allFields = tools.getCtData(all.inputs.title');\n\tconst { title } = allFields;\n\n\tasync function generateContent() {\n\t\tconst url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' + apiKey;\n\n\t\tconst data = {\n\t\t\tcontents: [\n\t\t\t\t{\n\t\t\t\t\tparts: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Você deve gerar o conteúdo pra preencher as informações do youtube (Enviar Vídeo). Gere uma sugestão para Título, Descrição, Hashs e Imagem de Capa, conforme detalhes a seguir:',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ text: title },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t\tgenerationConfig: {\n\t\t\t\tresponseMimeType: 'application/json',\n\t\t\t\tresponseSchema: {\n\t\t\t\t\ttype: 'OBJECT',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\ttitle: { type: 'STRING' },\n\t\t\t\t\t\tdescription: { type: 'STRING' },\n\t\t\t\t\t\thashs: {\n\t\t\t\t\t\t\ttype: 'ARRAY',\n\t\t\t\t\t\t\titems: { type: 'STRING' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tpropertyOrdering: ['title', 'description', 'hashs'],\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(data),\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Erro:' + response.status + response.statusText);\n\t\t\t}\n\n\t\t\tconst result = await response.json();\n\t\t\tconst rawText = result.candidates[0].content.parts[0].text;\n\t\t\tconsole.log('Resultado da API:', result);\n\n\t\t\tlet parsedObject;\n\t\t\ttry {\n\t\t\t\tparsedObject = JSON.parse(rawText);\n\t\t\t\tconsole.log('Objeto convertido:', parsedObject);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Erro ao converter o texto em objeto:', e);\n\t\t\t}\n\n\t\t\treturn parsedObject;\n\t\t} catch (error) {\n\t\t\tconsole.error('Erro na requisição:', error);\n\t\t}\n\t}\n\n\tconst generateImage = async () => {\n\t\tconst urlImg = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=' + apiKey;\n\t\tconst myHeaders = new Headers();\n\t\tmyHeaders.append('Content-Type', 'application/json');\n\n\t\tconst raw = JSON.stringify({\n\t\t\tinstances: [\n\t\t\t\t{\n\t\t\t\t\tprompt: 'A futuristic teddy bear flying in space.',\n\t\t\t\t},\n\t\t\t],\n\t\t\tparameters: {\n\t\t\t\tsampleCount: 2,\n\t\t\t\tpersonGeneration: 'allow_adult',\n\t\t\t\tincludeSafetyAttributes: true,\n\t\t\t\taspectRatio: '1:1',\n\t\t\t},\n\t\t});\n\n\t\tconst requestOptions = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: myHeaders,\n\t\t\tbody: raw,\n\t\t\tredirect: 'follow',\n\t\t};\n\n\t\treturn await fetch(urlImg, requestOptions)\n\t\t\t.then(response => response.text())\n\t\t\t.then(result => {\n\t\t\t\tconsole.log({ result });\n\t\t\t\treturn result;\n\t\t\t})\n\t\t\t.catch(error => console.error(error));\n\t};\n\n\tconst content = await generateContent();\n\tconst imageContent = await generateImage();\n\n\ttools.functions.setVar({\n\t\targs: '',\n\t\tpass: { keyPath: [path], value: [{ content, imageContent }] },\n\t});\n}"}}